Change History
--------------

The following sections outline Oracle Tools project changes in
reverse chronological order.

<h3>Version ${project.version}: ${timestamp} </h3>

<h4>Source and Documentation Contributors</h4>

*   Brian Oliver
*   Jonathan Knight

<h4>Global and Cross-Module Changes</h4>

*   [ORACLETOOLS-89](https://java.net/jira/browse/ORACLETOOLS-89): Upgraded to require Java 7.

    *BREAKING CHANGE:*  This is a breaking change for those applications that depend on Java 6
    as Oracle Tools now uses Java 7 features (like Autocloseable).

<h4>oracle-tools-core</h4>

*   [ORACLETOOLS-87](https://java.net/jira/browse/ORACLETOOLS-87): Increased
    the default Deferred timeout from 30 to 60 seconds.  This won't
    impact existing tests but will allow for longer running tests without
    requiring developers to explicitly specify a max timeout or override
    system properties.

*   [ORACLETOOLS-95](https://java.net/jira/browse/ORACLETOOLS-95): Introduced
    AbstractDeferred class to enable simple annoymous inner-class (and Lambda)
    implementations of Deferreds.

*   [ORACLETOOLS-97](https://java.net/jira/browse/ORACLETOOLS-97): Introduced
    the com.oracle.tools.predicate package and refactored existing Predicate
    based classes and usages to that package.

    *BREAKING CHANGE:*  This may be a breaking change for implementations
    that are extending the existing Predicate interface in the future.
    Implementations are encouraged to instead extend the
    com.oracle.tools.predicate.Predicate interface.

*   [ORACLETOOLS-109](https://java.net/jira/browse/ORACLETOOLS-109): Resolved
    issues with the ReflectionHelper.getCompatibleMethod/Constructor failing
    to locate interface methods and those defined in super classes

<h4>oracle-tools-runtime</h4>

*   [ORACLETOOLS-61](https://java.net/jira/browse/ORACLETOOLS-61): Introduced
    the concept of Platform, together with LocalPlatform and RemotePlatform
    implementations.

*   [ORACLETOOLS-79](https://java.net/jira/browse/ORACLETOOLS-79): Completed
    implementation of stdin redirection so that an ApplicationConsole can
    be used to interact with an Application stdin.

*   [ORACLETOOLS-83](https://java.net/jira/browse/ORACLETOOLS-83): Refactored
    RemoteExecutorServer to use ephemeral ports and remove hardcoded binding
    to Constants.getLocalHost() ie: 127.0.0.1 to allow operation in non-localhost
    modes (like for the new Remote Runtime module).

*   [ORACLETOOLS-86](https://java.net/jira/browse/ORACLETOOLS-86): Resolved issue
    where calling Application.waitFor() will not terminate when using applications
    produced by LocalJavaApplicationBuilders.

*   [ORACLETOOLS-88](https://java.net/jira/browse/ORACLETOOLS-88): Added wildcard
    classpath support to ClassPath.

*   [ORACLETOOLS-92](https://java.net/jira/browse/ORACLETOOLS-92): Introduced
    RemoteRunnable and RemoteCallable for use with RemoteExecutors (and applications)
    to allow Java 8 Lambda expressions to be used to represent remote
    requests.

    *BREAKING CHANGE:* While a breaking change in the APIs (from Runnable to RemoteRunnable
    and Callable to RemoteCallable), the impact on public implementations should
    be minimal as most implementations are already serializable.   All that is
    required is changing either "implements Runnable, Serializable" to
    "implements RemoteRunnable", or "implements Callable&lt;T&gt;, Serializable" to
    "implements RemoteCallable&lt;T&gt;".

*   [ORACLETOOLS-93](https://java.net/jira/browse/ORACLETOOLS-93): Added the
    ability to explicitly set the required JAVA_HOME to use for a Java Application
    Schema and/or JavaApplicationBuilder.  When not set, the JAVA_HOME of the
    executing process is assumed.

*   [ORACLETOOLS-94](https://java.net/jira/browse/ORACLETOOLS-94): Introduced
    Local(Java)ApplicationBuilder to replace and deprecate the
    Native(Java)ApplicationBuilder.   This provides consistency and appropriate
    symmetry with the new Remote(Java)ApplicationBuilders.

*   [ORACLETOOLS-96](https://java.net/jira/browse/ORACLETOOLS-96): Refactored how
    custom operating system environment variables may be defined.  They can now
    be defined on ApplicationSchema and ApplicationBuilders, but only
    ApplicationBuilders have the ability to "inherit" them from a local environment.
    The ability for ApplicationSchemas to "inherit" environment variables has
    been deprecated.

    For the most part environment variables should be defined on ApplicationBuilders
    and not ApplicationSchemas as they are usually an environment/builder setting.

*   [ORACLETOOLS-101](https://java.net/jira/browse/ORACLETOOLS-101): Introduced
    the ability to specify an ApplicationConsoleBuilder and thus ApplicationConsole
    for each Application defined as part of an Assembly/ApplicationGroup.

*   [ORACLETOOLS-102](https://java.net/jira/browse/ORACLETOOLS-102): Removed the
    requirement to throw/catch IOExceptions when using ApplicationBuilders and
    AssemblyBuilders.

    *BREAKING CHANGE:*  This will be a breaking change for applications that
    expect IOExceptions to be thrown from ApplicationBuilders or
    ApplicationGroupBuilders.

*   [ORACLETOOLS-104](https://java.net/jira/browse/ORACLETOOLS-104): Refactored
    fluent-methods from existing interfaces and classes into their own interfaces.

    This enables dramatic simplification of the use of generics, especially when
    creating ApplicationBuilders, Assembly/ApplicationGroup Builders and new Schemas.

*   [ORACLETOOLS-106](https://java.net/jira/browse/ORACLETOOLS-106): Introduced
    the concept of an Assembly.  This replaces the concept of an ApplicationGroup.

<h4>oracle-tools-runtime-remote</h4>

*   [ORACLETOOLS-91](https://java.net/jira/browse/ORACLETOOLS-91): Introduced
    experimental RemoteApplicationBuilders in the new oracle-tools-runtime-remote
    module.

<h4>oracle-tools-testing-support</h4>

*   [ORACLETOOLS-84](https://java.net/jira/browse/ORACLETOOLS-84): Introduced
    missing Eventually.assertThat methods to support timeouts.

<h4>oracle-tools-coherence</h4>

*   [ORACLETOOLS-92](https://java.net/jira/browse/ORACLETOOLS-92): Refactored
    Coherence-specific Runnables and Callables to be RemoteRunnables
    and RemoteCallables respectively.

*   [ORACLETOOLS-98](https://java.net/jira/browse/ORACLETOOLS-98): Refactor
    RestartClusterMemberAction to ensure the existing cluster member is
    no longer present in the cluster and the newly created member becomes
    a member of the cluster.

*   [ORACLETOOLS-99](https://java.net/jira/browse/ORACLETOOLS-99): Introduced
    the ability to determine the UID of a ClusterMember and the UIDs of all
    cluster members from a Cluster.

*   [ORACLETOOLS-103](https://java.net/jira/browse/ORACLETOOLS-103): Moved
    ClusterMember.ServiceStatus to a standalone enumeration.

*   [ORACLETOOLS-105](https://java.net/jira/browse/ORACLETOOLS-105): Introduced
    new Coherence-based interfaces and class implementations to simplify
    creating different types of Coherence applications, members and clusters.

*   [ORACLETOOLS-110](https://java.net/jira/browse/ORACLETOOLS-110): Introduced
    the ability to access NamedCaches using CoherenceClusterMember-based
    applications and via a CoherenceCluster instance.

<h4>oracle-tools-coherence-testing-support</h4>

*   (none)

<h4>oracle-tools-site</h4>

*   (none)


--------------------------------------------------------------------------------

<h3>Version: 1.2.2 on 2014-02-25 11:21</h3>

<h4>Source and Documentation Contributors</h4>

*   Brian Oliver

<h4>Global and Cross-Module Changes</h4>

*   (none)

<h4>oracle-tools-site</h4>

*   [ORACLETOOLS-77](https://java.net/jira/browse/ORACLETOOLS-77): Upgraded
    Doxia and Markdown plug-ins.  This included tidying up the documentation
    formatting and links that were broken/changed as part of the upgrade.

<h4>oracle-tools-runtime</h4>

*   [ORACLETOOLS-76](https://java.net/jira/browse/ORACLETOOLS-76): Introduced
    PropertyBuilder.setPropertyIfAbsent method to support optionally setting a property

*   [ORACLETOOLS-78](https://java.net/jira/browse/ORACLETOOLS-78): Introduced
    experimental Actions and ActionExecutors to programmatically control
    the behavior of Applications and Application Groups at runtime.

<h4>oracle-tools-testing-support</h4>

*   [ORACLETOOLS-74](https://java.net/jira/browse/ORACLETOOLS-74): Introduced
    Hamcrest-based com.oracle.tools.matchers.MapMatcher to support matching
    Maps (and NamedCaches) in assertThat statements.

<h4>oracle-tools-coherence</h4>

*   [ORACLETOOLS-78](https://java.net/jira/browse/ORACLETOOLS-78): Introduced
    the experimental RestartClusterMemberAction, to safely restart a cluster
    member as part of an Cluster (ApplicationGroup).

<h4>oracle-tools-coherence-testing-support</h4>

*   [ORACLETOOLS-75](https://java.net/jira/browse/ORACLETOOLS-75): Introduced
    Hamcrest-based com.oracle.tools.matchers.PartitionSetMatcher to support
    making Coherence PartitionSet-based assertions.


--------------------------------------------------------------------------------

<h3>Version 1.2.1: 2014-01-24 15:39</h3>

<h4>Source and Documentation Contributors</h4>

*   Brian Oliver

<h4>Global and Cross-Module Changes</h4>

*   [ORACLETOOLS-67](https://java.net/jira/browse/ORACLETOOLS-67): Modified
    sure-fire plugin to set java.net.PreferIPv4Stack=true for all tests.  This
    resolves possible Container-based test failures on IPv6 enabled platforms
    when running Java 7 (or 8) on Virtual Private Networks (VPNs).

*   [ORACLETOOLS-71](https://java.net/jira/browse/ORACLETOOLS-71): Upgraded
    to use JUnit 4.11.

<h4>oracle-tools-runtime</h4>

*   [ORACLETOOLS-67](https://java.net/jira/browse/ORACLETOOLS-67): Changed the
    definition of Constants.getLocalHost() to return "127.0.0.1"
    (the loopback adapter) to ensure localized testing on VPNs.

    Added a warning when using Container-based Java Application Builders
    when there are incompatible java.net.PreferIPv4Stack settings.

*   [ORACLETOOLS-68](https://java.net/jira/browse/ORACLETOOLS-68): Deprecated
    the concept of "default" properties in the PropertiesBuilder
    (they weren't used).

*   [ORACLETOOLS-73](https://java.net/jira/browse/ORACLETOOLS-73): Optionally
    sets a default RMI address (to Constants.getLocalHost()) when enabling JMX.
    In the past no default was set.

<h4>oracle-tools-coherence-tests</h4>

*   [ORACLETOOLS-72](https://java.net/jira/browse/ORACLETOOLS-72): Updated JMX-based
    tests to ensure they use JMX.


--------------------------------------------------------------------------------

<h3>Version 1.2.0: 2014-01-17 11:31</h3>

<h4>Source and Documentation Contributors</h4>

*   Jonathan Knight, Brian Oliver

<h4>Global and Cross-Module Changes</h4>

*   No Changes.

<h4>oracle-tools-runtime</h4>

*   [ORACLETOOLS-63](https://java.net/jira/browse/ORACLETOOLS-63): Made
    Application, ApplicationGroup, ApplicationConsole and ApplicationProcess
    implement Closeable to support auto-closing in Java 7+.

    Deprecated all "destroy" methods; they now are delegated onto "close" methods.
    All "destroy" methods will be removed in a later major srelease.

*   [ORACLETOOLS-64](https://java.net/jira/browse/ORACLETOOLS-64): Destroying
    or closing an Application or ApplicationGroup should not close a provided
    ApplicationConsole as this may lead to I/O exceptions should the said
    ApplicationConsole be shared with other Applications/ApplicationGroups.

*   [ORACLETOOLS-65](https://java.net/jira/browse/ORACLETOOLS-65): Introduced
    the ability for AbstractApplicationGroups to add new and remove existing
    Applications dynamically at runtime.  This included making
    AbstractApplicationGroups thread-safe.

*   [ORACLETOOLS-66](https://java.net/jira/browse/ORACLETOOLS-65): Made
    NativeJavaApplicationBuilder use the value from Constants.getLocalHost()
    as the host address property to be passed to child processes instead of
    using InetAddress.getLocalHost().   This resolves connectivity issues
    when running on virtual private networks.

<h4>oracle-tools-coherence</h4>

*   [ORACLETOOLS-6](https://java.net/jira/browse/ORACLETOOLS-6): Introduced
    the ability to determine the status of a service from a ClusterMember
    with the ClusterMember.getServiceStatus(String) method.

*   [ORACLETOOLS-62](https://java.net/jira/browse/ORACLETOOLS-62): Upgraded
    to use Coherence 3.7.1.11


--------------------------------------------------------------------------------

<h3>Version: 1.1.0 on 2013-11-20 17:51</h3>

<h4>Source and Documentation Contributors</h4>

*   Brian Oliver

<h4>Global and Cross-Module Changes</h4>

*   No Changes.

<h4>oracle-tools-core</h4>

*   [ORACLETOOLS-49](https://java.net/jira/browse/ORACLETOOLS-49): Introduced
    the concept of Capture to capture a single value from an underlying
    Iterator.  This allows said values to be reused without causing new values
    to the produced by the underlying Iterator.

*   [ORACLETOOLS-51](https://java.net/jira/browse/ORACLETOOLS-51): Introduced
    the CompletionListener and ExceptionListener interfaces together
    with FutureCompletionListener and DeferredCompletionListener implementations
    for the RemoteExecutor framework.

<h4>oracle-tools-runtime</h4>

*   [ORACLETOOLS-51](https://java.net/jira/browse/ORACLETOOLS-51): Introduced
    the RemoteExecutor framework to support remote execution of Callable and
    Runnables in Java-based Applications.   Implemented support for both
    Container-based and Native Java Applications.

    eg: application.submit(Callable&lt;T&gt;, CompletionListener&lt;T&gt;)

    Stateful Callables / Runnables will need to be Serializable in order to
    be successfully executed correctly, for both in-process/Container-based
    applications and Remote/Native applications.

    Introduced the com.oracle.tools.runtime.concurrent package together with
    a Socket-based implementation.

    This framework is also used to implement "orphan" protection (see below).

*   [ORACLETOOLS-52](https://java.net/jira/browse/ORACLETOOLS-52): Implemented
    "Orphan Protection" for Java-based Applications.

    Refactored how Native Java Applications are started so that they may optionally
    be "orphaned" if the starting process terminates (deliberately or accidentally).

    Added new options to the NativeJavaApplicationBuilder to selectively enable
    orphan protection (enabled by default) - if a parent process terminates,
    child processes terminate.

<h4>oracle-tools-runtime-tests</h4>

*   [ORACLETOOLS-51](https://java.net/jira/browse/ORACLETOOLS-51): Introduced
    RemoteExecutors framework tests.

*   [ORACLETOOLS-52](https://java.net/jira/browse/ORACLETOOLS-52): Introduced
    "Orphan Protection" tests.

<h4>oracle-tools-testing-support</h4>

*   [ORACLETOOLS-54](https://java.net/jira/browse/ORACLETOOLS-54): Introduced
    the ability to use Deferreds to represent Remote Callables together with
    a new Eventually.assertThat method to allow deferred asserts
    based on submitted Callables.

    eg:  Eventually.assertThat(application, callable, matcher);

    will try to eventually match the result of the specified Callable
    when executed, possibly numerous times, with the provided application.

*   [ORACLETOOLS-59](https://java.net/jira/browse/ORACLETOOLS-59): Introduced
    the com.oracle.tools.deferred.Eventually static class to replace the
    now deprecated DeferredAssert class.

<h4>oracle-tools-coherence</h4>

*   [ORACLETOOLS-50](https://java.net/jira/browse/ORACLETOOLS-50): Introduced
    the ability to set the "tangosol.coherence.localport" property and have
    it automatically set when WKA is set.

*   [ORACLETOOLS-53](https://java.net/jira/browse/ORACLETOOLS-53): Refactor
    Coherence-based Tools to use RemoteExecutors to determine Member state
    instead of relying on JMX/MBeans.   It's now possible to use and control
    ClusterMembers and Clusters with JMX disabled.

*   [ORACLETOOLS-55](https://java.net/jira/browse/ORACLETOOLS-55): Upgraded
    to use Coherence 3.7.1.10.

*   [ORACLETOOLS-56](https://java.net/jira/browse/ORACLETOOLS-56): Introduced
    the ability to ask the name of a ClusterMember cluster.

*   [ORACLETOOLS-57](https://java.net/jira/browse/ORACLETOOLS-57): Introduced
    the ability specify the operational override for a ClusterMember.

*   [ORACLETOOLS-58](https://java.net/jira/browse/ORACLETOOLS-58): Introduced
    the ability to ask a ClusterMember if a particular service is running.

<h4>oracle-tools-coherence-tests</h4>

*   Refactored existing tests to take advantage of the new Remote Executables
    framework and avoid the requirement to use and configure JMX.

*   Refactored existing tests to take advantage of the new Eventually.assertThat
    method.

*   Refactored existing tests to take advantage of the Captures when creating
    Clusters using a ClusterBuilder.

*   Introduced new tests for the new features in the oracle-tools-coherence
    package.

<h4>oracle-tools-coherence-testing-support</h4>

*   No Changes.

<h4>oracle-tools-site</h4>

*   [ORACLETOOLS-47](https://java.net/jira/browse/ORACLETOOLS-47): Introduced
    initial Coherence Module for Oracle Tools documentation.


--------------------------------------------------------------------------------

<h3>Version 1.0.0: 2013-07-30 13:38 </h3>

<h4>Acknowledgements</h4>

Huge thanks to everyone that contributed feedback, suggestions, documentation
and ideas for this release.  It's great to see broader application adoption,
especially outside Oracle Coherence environments.  We're looking forward to
an even greater release soon, simplifying the testing process even further!

<h4>Source and Documentation Contributors</h4>

*   Noah Arliss, Jonathan Knight, Paul Makin, Brian Oliver and Patrick Peralta

<h4>Global and Cross-Module Changes</h4>

*   [ORACLETOOLS-25](https://java.net/jira/browse/ORACLETOOLS-25): Upgrade Project
    Parent POM to Version 4.

*   [ORACLETOOLS-31](https://java.net/jira/browse/ORACLETOOLS-31): Upgrade GitHub
    Maven Site Plugin to Version 0.8.

<h4>oracle-tools-all</h4>

*   [ORACLETOOLS-34](https://java.net/jira/browse/ORACLETOOLS-34): Introduced to
    provide a single distribution of Oracle Tools.

<h4>oracle-tools-core</h4>

*   [ORACLETOOLS-14](https://java.net/jira/browse/ORACLETOOLS-14): Removed Notified
    Deferred implementation as by nature they are unreliable.

*   [ORACLETOOLS-39](https://java.net/jira/browse/ORACLETOOLS-39): Introduced
    numerous configurable strategies for waiting for Deferreds to become available
    (as implemented by the Ensured class).  These include:  constant (polling),
    fibonacci (random and uniform), exponential (random and uniform).

    Configuring these options occurs by setting the
    "oracletools.deferred.retry.strategy" system property with the values:
    constant, fibonacci, random.fibonacci, exponential or random.exponential.
    The default is now random.fibonacci (instead of constant polling)

    Also introduced the ability to use a system property to set the default
    retry timeout (which is 30 seconds).   The property is:
    "oracletools.defered.retry.timeout".  Units of measure include: ms, s, m and h
    meaning milliseconds, seconds, minutes and hours respectively.

    *Breaking Change:*  While this is a breaking change, the chance of an
    application being impacted is very minimal, if at all.  Only applications
    making customize time-out calls, which is rare, will be affected.


*   [ORACLETOOLS-40](https://java.net/jira/browse/ORACLETOOLS-40): Refactored
    Deferred.get() semantics to allow returning null as a valid reference.

    Introduced InstanceUnavailableException to represent the concept that a
    Deferred instance is currently unavailable, but may become available in
    the future. ie: this is thrown instead of null being returned.

    Replaced the ObjectNotAvailableException with the UnresolveableInstanceException.

    *Breaking Change:*  While this is a breaking change, the chance of an
    application being impacted is very minimal, if at all.  Only applications
    creating customized Deferred implementations, which is rare, will be affected.

<h4>oracle-tools-runtime</h4>

*   [ORACLETOOLS-12](https://java.net/jira/browse/ORACLETOOLS-12): Resolved issue
    when Native processes would fail to execute due to timing and class-path
    issues (on Windows Platforms).

*   [ORACLETOOLS-13](https://java.net/jira/browse/ORACLETOOLS-13): Resolved issue
    Oracle Tools virtualization would fail to run when classpaths contain
    whitespace (on Windows Platforms).

*   [ORACLETOOLS-21](https://java.net/jira/browse/ORACLETOOLS-21): Refactored
    and renamed Virtualization package and associated Virtualizeed Application,
    Virtualized Process and Virtualize Builders to be themed as being
    "ContainerBased".   This was to clear up possible confusion when running
    Native applications on Virtualized infrastructure.  As part of this work we
    also renamed ExternalJavaApplicationBuilder to be a NativeJavaApplicationBuilder.

*   [ORACLETOOLS-26](https://java.net/jira/browse/ORACLETOOLS-26): Refactored
    the ApplicationConsole interfaces and implementations to allow separate
    control of stdout, stderr and stdin.

*   [ORACLETOOLS-27](https://java.net/jira/browse/ORACLETOOLS-27): Introduced
    the concept of "diagnostics" to provide application life-cycle information
    without requiring redirection of ApplicationConsoles.

*   [ORACLETOOLS-28](https://java.net/jira/browse/ORACLETOOLS-28): Introduced
    the ability to enable remote Java debugging (when using Java-based Application
    Schemas) for Native Java Applications.

*   [ORACLETOOLS-29](https://java.net/jira/browse/ORACLETOOLS-29): Resolved issue
    where the names of Applications created as part of an Group start at 0 instead
    of 1.

*   [ORACLETOOLS-30](https://java.net/jira/browse/ORACLETOOLS-30): Resolves issue
    where Native Windows NT / XP processes may hang when being destroyed.

*   [ORACLETOOLS-32](https://java.net/jira/browse/ORACLETOOLS-32): ApplicationSchemas
    now *default* to inheriting environment variables from the underlying process.

*   [ORACLETOOLS-36](https://java.net/jira/browse/ORACLETOOLS-36): Resolves issues
    where having spaces in a System Property may cause a Native Java application not
    to start.

*   [ORACLETOOLS-37](https://java.net/jira/browse/ORACLETOOLS-37): Renamed and refactored
    PropertiesBuilder.fromCurrentSystemProperties to return only custom properties.
    The new method is called PropertiesBuilder.fromCurrentNonStandardSystemProperties.

    *Breaking Change:*  While this is a breaking change, the chance of an
    application being impacted is very minimal, if at all.  Applications using the
    previous method would not support cross-platform deployment.  Changing to
    the new method resolves this.

<h4>oracle-tools-runtime-tests</h4>

*   Introduced to encapsulate Functional and Integration Tests.

<h4>oracle-tools-testing-support</h4>

*   No Changes.

<h4>oracle-tools-coherence</h4>

*   [ORACLETOOLS-2](https://java.net/jira/browse/ORACLETOOLS-2): Resolved issue
    when DeferredAssert would hang (wait for a long time) when querying an MBean
    for a crashed server.

*   [ORACLETOOLS-4](https://java.net/jira/browse/ORACLETOOLS-2): Resolved issue
    when calling "eventually" on a non existent MBean would hang forever
    (wait for a long time).

*   [ORACLETOOLS-10](https://java.net/jira/browse/ORACLETOOLS-10): Add support for
    specifying a log destination for Coherence when using a Coherence-based MemeberSchema.

*   [ORACLETOOLS-35](https://java.net/jira/browse/ORACLETOOLS-35): Add automatic support
    enabling file-base XSD loading with Coherence using Java 8 (b91) that includes
    JAXP 1.5 changes.

*   [ORACLETOOLS-38](https://java.net/jira/browse/ORACLETOOLS-38): Add automatic support
    for running in "java.awt.headless" mode.

<h4>oracle-tools-coherence-tests</h4>

*   Introduced to encapsulate Functional and Integration Tests.

<h4>oracle-tools-coherence-testing-support</h4>

*   [ORACLETOOLS-19](https://java.net/jira/browse/ORACLETOOLS-19): Introduced
    an AbtractCoherenceTest to support Coherence Test isolation.


--------------------------------------------------------------------------------

<h3>Version 0.0.8 @ 2013-02-26 13:12 </h3>

<h4>Global and Cross-Module Changes</h4>

*   Initial Release based on work from The Oracle Coherence Incubator.

<h4>oracle-tools-core</h4>

*   Defines Core and Shared Interfaces, Classes and Resources.

<h4>oracle-tools-runtime</h4>

*   Defines Runtime Process Management infrastructure.

<h4>oracle-tools-testing-support</h4>

*   Defines JUnit Testing Extensions for Deferred Resources.

<h4>oracle-tools-coherence</h4>

*   Defines Extensions to manage Oracle Coherence Runtimes.
