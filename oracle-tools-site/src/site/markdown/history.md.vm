Change History
--------------

The following sections outline Oracle Tools project changes in
reverse chronological order.


<h3>Version ${project.version}: ${timestamp} </h3>

<h4>Source and Documentation Contributors</h4>

*  Brian Oliver

<h4>Global and Cross-Module Changes</h4>

*   No Changes.

<h4>oracle-tools-all</h4>

*   No Changes.

<h4>oracle-tools-core</h4>

*   [ORACLETOOLS-51](https://java.net/jira/browse/ORACLETOOLS-51): Introduced
    RemoteExecutors Framework support interfaces and implementations.

    Introduced the CompletionListener and ExceptionListener interfaces together
    with FutureCompletionListener and DeferredCompletionListener implementations
    for the RemoteExecutor Framework.

<h4>oracle-tools-runtime</h4>

*   [ORACLETOOLS-51](https://java.net/jira/browse/ORACLETOOLS-51): Introduced
    RemoteExecutors Framework to support remote execution of Callable and Runnables
    in Java-based Applications.

    Introduced com.oracle.tools.runtime.concurrent RemoteExecution framework
    and Socket-based implementation.

*   [ORACLETOOLS-52](https://java.net/jira/browse/ORACLETOOLS-52): Implemented
    "Orphan Protection" for Java-based Applications.

    Refactored how Native Java Applications are started so that they may optionally
    be "orphaned" if the starting process terminates (deliberately or accidentally).

    Added new options to the NativeJavaApplicationBuilder to selectively enable
    orphan protection (on by default) - if a parent process terminates, child
    processes terminate.

<h4>oracle-tools-runtime-tests</h4>

*   [ORACLETOOLS-51](https://java.net/jira/browse/ORACLETOOLS-51): Introduced
    RemoteExecutors Framework tests.

*   [ORACLETOOLS-52](https://java.net/jira/browse/ORACLETOOLS-52): Introduced
    "Orphan Protection" tests.

<h4>oracle-tools-testing-support</h4>

*   [ORACLETOOLS-54](https://java.net/jira/browse/ORACLETOOLS-54): Introduced
    the ability to use Deferreds to represent Remote Callables together with
    a new deferred assertThat method to allow deferred asserts based on
    remotely executed callables.

    eg:  assertThat(application, callable, matcher);

<h4>oracle-tools-coherence</h4>

*   No Changes.

<h4>oracle-tools-coherence-tests</h4>

*   [ORACLETOOLS-54](https://java.net/jira/browse/ORACLETOOLS-54): Introduced
    a new test using Remote Callables to assert singleton cluster creation.

<h4>oracle-tools-coherence-testing-support</h4>

*   No Changes.


--------------------------------------------------------------------------------

<h3>Version 1.0.0: 2013-07-30 13:38 </h3>

<h4>Acknowledgements</h4>

Huge thanks to everyone that contributed feedback, suggestions, documentation
and ideas for this release.  It's great to see broader application adoption,
especially outside Oracle Coherence environments.  We're looking forward to
an even greater release soon, simplifying the testing process even further!

<h4>Source and Documentation Contributors</h4>

*   Noah Arliss, Jonathan Knight, Paul Makin, Brian Oliver and Patrick Peralta

<h4>Global and Cross-Module Changes</h4>

*   [ORACLETOOLS-25](https://java.net/jira/browse/ORACLETOOLS-25): Upgrade Project
    Parent POM to Version 4.

*   [ORACLETOOLS-31](https://java.net/jira/browse/ORACLETOOLS-31): Upgrade GitHub
    Maven Site Plugin to Version 0.8.

<h4>oracle-tools-all</h4>

*   [ORACLETOOLS-34](https://java.net/jira/browse/ORACLETOOLS-34): Introduced to
    provide a single distribution of Oracle Tools.

<h4>oracle-tools-core</h4>

*   [ORACLETOOLS-14](https://java.net/jira/browse/ORACLETOOLS-14): Removed Notified
    Deferred implementation as by nature they are unreliable.

*   [ORACLETOOLS-39](https://java.net/jira/browse/ORACLETOOLS-39): Introduced
    numerous configurable strategies for waiting for Deferreds to become available
    (as implemented by the Ensured class).  These include:  constant (polling),
    fibonacci (random and uniform), exponential (random and uniform).

    Configuring these options occurs by setting the
    "oracletools.deferred.retry.strategy" system property with the values:
    constant, fibonacci, random.fibonacci, exponential or random.exponential.
    The default is now random.fibonacci (instead of constant polling)

    Also introduced the ability to use a system property to set the default
    retry timeout (which is 30 seconds).   The property is:
    "oracletools.defered.retry.timeout".  Units of measure include: ms, s, m and h
    meaning milliseconds, seconds, minutes and hours respectively.

    *Breaking Change:*  While this is a breaking change, the chance of an
    application being impacted is very minimal, if at all.  Only applications
    making customize time-out calls, which is rare, will be affected.


*   [ORACLETOOLS-40](https://java.net/jira/browse/ORACLETOOLS-40): Refactored
    Deferred.get() semantics to allow returning null as a valid reference.

    Introduced InstanceUnavailableException to represent the concept that a
    Deferred instance is currently unavailable, but may become available in
    the future. ie: this is thrown instead of null being returned.

    Replaced the ObjectNotAvailableException with the UnresolveableInstanceException.

    *Breaking Change:*  While this is a breaking change, the chance of an
    application being impacted is very minimal, if at all.  Only applications
    creating customized Deferred implementations, which is rare, will be affected.

<h4>oracle-tools-runtime</h4>

*   [ORACLETOOLS-12](https://java.net/jira/browse/ORACLETOOLS-12): Resolved issue
    when Native processes would fail to execute due to timing and class-path
    issues (on Windows Platforms).

*   [ORACLETOOLS-13](https://java.net/jira/browse/ORACLETOOLS-13): Resolved issue
    Oracle Tools virtualization would fail to run when classpaths contain
    whitespace (on Windows Platforms).

*   [ORACLETOOLS-21](https://java.net/jira/browse/ORACLETOOLS-21): Refactored
    and renamed Virtualization package and associated Virtualizeed Application,
    Virtualized Process and Virtualize Builders to be themed as being
    "ContainerBased".   This was to clear up possible confusion when running
    Native applications on Virtualized infrastructure.  As part of this work we
    also renamed ExternalJavaApplicationBuilder to be a NativeJavaApplicationBuilder.

*   [ORACLETOOLS-26](https://java.net/jira/browse/ORACLETOOLS-26): Refactored
    the ApplicationConsole interfaces and implementations to allow separate
    control of stdout, stderr and stdin.

*   [ORACLETOOLS-27](https://java.net/jira/browse/ORACLETOOLS-27): Introduced
    the concept of "diagnostics" to provide application life-cycle information
    without requiring redirection of ApplicationConsoles.

*   [ORACLETOOLS-28](https://java.net/jira/browse/ORACLETOOLS-28): Introduced
    the ability to enable remote Java debugging (when using Java-based Application
    Schemas) for Native Java Applications.

*   [ORACLETOOLS-29](https://java.net/jira/browse/ORACLETOOLS-29): Resolved issue
    where the names of Applications created as part of an Group start at 0 instead
    of 1.

*   [ORACLETOOLS-30](https://java.net/jira/browse/ORACLETOOLS-30): Resolves issue
    where Native Windows NT / XP processes may hang when being destroyed.

*   [ORACLETOOLS-32](https://java.net/jira/browse/ORACLETOOLS-32): ApplicationSchemas
    now *default* to inheriting environment variables from the underlying process.

*   [ORACLETOOLS-36](https://java.net/jira/browse/ORACLETOOLS-36): Resolves issues
    where having spaces in a System Property may cause a Native Java application not
    to start.

*   [ORACLETOOLS-37](https://java.net/jira/browse/ORACLETOOLS-37): Renamed and refactored
    PropertiesBuilder.fromCurrentSystemProperties to return only custom properties.
    The new method is called PropertiesBuilder.fromCurrentNonStandardSystemProperties.

    *Breaking Change:*  While this is a breaking change, the chance of an
    application being impacted is very minimal, if at all.  Applications using the
    previous method would not support cross-platform deployment.  Changing to
    the new method resolves this.

<h4>oracle-tools-runtime-tests</h4>

*   Introduced to encapsulate Functional and Integration Tests.

<h4>oracle-tools-testing-support</h4>

*   No Changes.

<h4>oracle-tools-coherence</h4>

*   [ORACLETOOLS-2](https://java.net/jira/browse/ORACLETOOLS-2): Resolved issue
    when DeferredAssert would hang (wait for a long time) when querying an MBean
    for a crashed server.

*   [ORACLETOOLS-4](https://java.net/jira/browse/ORACLETOOLS-2): Resolved issue
    when calling "eventually" on a non existent MBean would hang forever
    (wait for a long time).

*   [ORACLETOOLS-10](https://java.net/jira/browse/ORACLETOOLS-10): Add support for
    specifying a log destination for Coherence when using a Coherence-based MemeberSchema.

*   [ORACLETOOLS-35](https://java.net/jira/browse/ORACLETOOLS-35): Add automatic support
    enabling file-base XSD loading with Coherence using Java 8 (b91) that includes
    JAXP 1.5 changes.

*   [ORACLETOOLS-38](https://java.net/jira/browse/ORACLETOOLS-38): Add automatic support
    for running in "java.awt.headless" mode.

<h4>oracle-tools-coherence-tests</h4>

*   Introduced to encapsulate Functional and Integration Tests.

<h4>oracle-tools-coherence-testing-support</h4>

*   [ORACLETOOLS-19](https://java.net/jira/browse/ORACLETOOLS-19): Introduced
    an AbtractCoherenceTest to support Coherence Test isolation.


--------------------------------------------------------------------------------

<h3>Version 0.0.8 @ 2013-02-26 13:12 </h3>

<h4>Global and Cross-Module Changes</h4>

*   Initial Release based on work from The Oracle Coherence Incubator.

<h4>oracle-tools-core</h4>

*   Defines Core and Shared Interfaces, Classes and Resources.

<h4>oracle-tools-runtime</h4>

*   Defines Runtime Process Management infrastructure.

<h4>oracle-tools-testing-support</h4>

*   Defines JUnit Testing Extensions for Deferred Resources.

<h4>oracle-tools-coherence</h4>

*   Defines Extensions to manage Oracle Coherence Runtimes.
